<%@ jet
imports="
        java.util.List
        java.util.ArrayList
        java.util.Stack
        org.talend.components.api.component.ComponentDefinition
        org.talend.components.api.properties.ComponentProperties
        org.talend.components.api.runtime.ComponentRuntimeContainer
        org.talend.components.api.runtime.ComponentRuntime
        org.talend.components.api.properties.Property
        org.talend.components.api.NamedThing
		org.talend.component.core.model.Component
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.core.model.utils.TalendTextUtils
        org.talend.designer.codegen.config.CodeGeneratorArgument
		"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
Component component = (Component)node.getComponent();
ComponentProperties componentProps = node.getComponentProperties();
ComponentDefinition def = component.getComponentDefinition();

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = null;
List<IMetadataColumn> columnList = null;
boolean hasDynamic = false;
String dynamicColName = null;
if ((metadatas != null) && (metadatas.size() > 0)) { // metadata

	metadata = metadatas.get(0);
	if(metadata != null){
		columnList = metadata.getListColumns();
		int nbSchemaColumns = columnList.size();
		
		hasDynamic = false;
		for (IMetadataColumn column : columnList) {
			if (column.getTalendType().equals("id_Dynamic")) {
				hasDynamic = true;
				dynamicColName = column.getLabel();
				break;
			}
		}
	}
}	
%>

org.talend.components.api.component.ComponentDefinition def_<%=cid %> =
   new <%= def.getClass().getName()%>();
 
<%
if(def instanceof org.talend.components.api.component.InputComponentDefinition){
%>
	org.talend.components.api.schema.column.type.TypeMapping.registryTypes(((org.talend.components.api.component.InputComponentDefinition)def_<%=cid%>).getTypesRegistry());
<%
}else if(def instanceof org.talend.components.api.component.OutputComponentDefinition){
%>
	org.talend.components.api.schema.column.type.TypeMapping.registryTypes(((org.talend.components.api.component.OutputComponentDefinition)def_<%=cid%>).getTypesRegistry());
<%	
}
%>

<%
List<Component.CodegenPropInfo> propsToProcess = component.getCodegenPropInfos(componentProps);
%>

<%= componentProps.getClass().getName()%> props_<%=cid %> = (<%= componentProps.getClass().getName()%>) def_<%=cid %>.createRuntimeProperties();
<%

for (Component.CodegenPropInfo propInfo : propsToProcess) { // propInfo
	List<NamedThing> properties = propInfo.props.getProperties();
	for (NamedThing prop : properties) { // property
        if (prop instanceof Property) { // if, only deal with valued Properties
        Property property = (Property)prop;
		  Object value = property.getValue();
		  if (value != null && (!(value instanceof String) || !((String)value).equals(""))) { // if
%>
	       		props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>", 
			     	<%=component.getCodegenValue(property, property.getStringValue())%>);
<%
    		} // if
        }//else may be a ComponentProperties so ignor
	} // property
} // propInfo
%>
<%
if(def instanceof org.talend.components.api.component.ConnectionComponentDefinition){
%>
	org.talend.components.api.runtime.connection.ConnectionManager connManager_<%=cid%> = ((org.talend.components.api.component.ConnectionComponentDefinition)def_<%=cid%>).getConnectionManager();
	globalMap.put("conn_<%=cid%>", connManager_<%=cid%>.getConnectionByKey("<%=cid%>", props_<%=cid%>));
<%
}
%>
org.talend.components.api.runtime.ComponentRuntimeContainer container_<%=cid %> = 
<%
	if (hasDynamic) {
%>
    	new routines.system.ComponentRuntimeContainerDynamic() {
<%
	} else {
%>
    	new routines.system.ComponentRuntimeContainerBase() {
<%
	}
%>
    public java.util.Map<String, Object> getGlobalMap() {
		return globalMap;
    }
    
    public String getCurrentComponentName(){
    	return "<%=cid %>";
    }
};

<%
if(metadata != null){
	if(def instanceof org.talend.components.api.component.InputComponentDefinition){
	%>
		org.talend.components.api.runtime.input.Source source_<%=cid%> = ((org.talend.components.api.component.InputComponentDefinition)def_<%=cid%>).getInputRuntime();
		source_<%=cid%>.init(props_<%=cid%>);
		org.talend.components.api.runtime.input.Reader recordReader_<%=cid%> = source_<%=cid%>.getRecordReader(new org.talend.components.api.runtime.input.SingleSplit());
		java.util.List<org.talend.components.api.schema.SchemaElement> fields_<%=cid%> = recordReader_<%=cid%>.getSchema();
		java.util.Map<String, org.talend.components.api.schema.internal.DataSchemaElement> fieldsMap_<%=cid%> = new java.util.HashMap<String, org.talend.components.api.schema.internal.DataSchemaElement>();
		for(org.talend.components.api.schema.SchemaElement field_<%=cid%> : fields_<%=cid%>){
			fieldsMap_<%=cid%>.put(field_<%=cid%>.getName(), (org.talend.components.api.schema.internal.DataSchemaElement)field_<%=cid%>);
		}
		<%
		//TODO consider to move dynamic into Source/Reader after avro schema?
		if(hasDynamic){
		%>
			routines.system.Dynamic dynamic_<%=cid%> = new routines.system.Dynamic();
			org.talend.components.api.schema.internal.DataSchemaElement dynamicSchemaElement_<%=cid%> = fieldsMap_<%=cid%>.get("<%=dynamicColName%>");
			for(org.talend.components.api.schema.SchemaElement childDynamic_<%=cid%> : dynamicSchemaElement_<%=cid%>.getChildren()){
				routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = new routines.system.DynamicMetadata();
		    	dynamicMetadata_<%=cid%>.setName(childDynamic_<%=cid%>.getName());
		    	dynamicMetadata_<%=cid%>.setDbName(childDynamic_<%=cid%>.getName());
		    	String talendType_<%=cid%> = null;
		    	//TODO finish the mapping
		    	if(childDynamic_<%=cid%>.getType() == org.talend.components.api.schema.SchemaElement.Type.STRING){
		    		talendType_<%=cid%> = "String";
		    	}
		    	dynamicMetadata_<%=cid%>.setType("id_" + talendType_<%=cid%>);
		    	dynamic_<%=cid%>.metadatas.add(dynamicMetadata_<%=cid%>);
			} 
		<%
		}
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
		if(outgoingConns.size() > 0){ // outgoing size
			// FIXME - multiple outgoing connections?
			IConnection outgoingConn = outgoingConns.get(0);
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){ // outgoingConn 
			%>
				while(recordReader_<%=cid%>.advance()){
					<%
					if(hasDynamic){
					%>
						dynamic_<%=cid%>.clearColumnValues();
						for(org.talend.components.api.schema.SchemaElement childDynamic_<%=cid%> : dynamicSchemaElement_<%=cid%>.getChildren()){
							org.talend.components.api.schema.internal.DataSchemaElement childDynamicElement_<%=cid%> = (org.talend.components.api.schema.internal.DataSchemaElement)childDynamic_<%=cid%>;
							dynamic_<%=cid%>.addColumnValue(org.talend.components.api.schema.column.type.TypeMapping.convert(source_<%=cid%>.getFamilyName(), childDynamicElement_<%=cid%>, childDynamicElement_<%=cid%>.getAppColType().newInstance().retrieveTValue(recordReader_<%=cid%>.getCurrent(), childDynamicElement_<%=cid%>.getAppColName())));
						}
						<%=outgoingConn.getName()%>.<%=dynamicColName%> = dynamic_<%=cid%>;
					<%
					}
					%>
					<%
					for(IMetadataColumn column : columnList){ // column
						String columnName = column.getLabel();
		              	JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						if(columnName.equals(dynamicColName)){
							continue;
						}
						//TODO consider null and default and reject in here
						%>
						<%=outgoingConn.getName()%>.<%=columnName%> = (<%=typeToGenerate%>)org.talend.components.api.schema.column.type.TypeMapping.convert(source_<%=cid%>.getFamilyName(), fieldsMap_<%=cid%>.get("<%=columnName%>"), fieldsMap_<%=cid%>.get("<%=columnName%>").getAppColType().newInstance().retrieveTValue(recordReader_<%=cid%>.getCurrent(), fieldsMap_<%=cid%>.get("<%=columnName%>").getAppColName()));
					<%
					}
			}			
		}
	}else if(def instanceof org.talend.components.api.component.OutputComponentDefinition){
	%>
		org.talend.components.api.runtime.output.Sink sink_<%=cid%> = ((org.talend.components.api.component.OutputComponentDefinition)def_<%=cid%>).getOutputRuntime();
		sink_<%=cid%>.init(props_<%=cid%>);
		org.talend.components.api.runtime.output.Writer recordWriter_<%=cid%> = sink_<%=cid%>.getRecordWriter();
		java.util.List<org.talend.components.api.schema.SchemaElement> fields_<%=cid%> = sink_<%=cid%>.getSchema();
		java.util.Map<String, org.talend.components.api.schema.SchemaElement.Type> fieldsMap_<%=cid%> = new java.util.HashMap<String, org.talend.components.api.schema.SchemaElement.Type>();
		for(org.talend.components.api.schema.SchemaElement field_<%=cid%> : fields_<%=cid%>){
			fieldsMap_<%=cid%>.put(field_<%=cid%>.getName(), field_<%=cid%>.getType());
		}
		<%//wait for using avro replace BaseRowStruct%>
		org.talend.components.api.runtime.row.BaseRowStruct row_<%=cid%> = new org.talend.components.api.runtime.row.BaseRowStruct(fieldsMap_<%=cid%>);
	<%	
	}
}
%>



